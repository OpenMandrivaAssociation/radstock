diff -Naur radstock-0.66/CHANGES.password radstock-0.66.oden/CHANGES.password
--- radstock-0.66/CHANGES.password	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/CHANGES.password	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,14 @@
+08/31/2002 - v1.2
+
+	- Fixes to compile cleanly on Redhat 7.3
+	- Added DEFAULT client lookup
+	  (Thanks to Paul Pilsbury <ppilsbur@connect.com.au>)
+
+05/27/2001 - v1.1
+
+	- Try to decrypt passwords correctly when we are watching
+	  packets that originated from our local machine.
+	
+05/27/2001 - v1.0
+
+	- Initial release
diff -Naur radstock-0.66/Makefile.in radstock-0.66.oden/Makefile.in
--- radstock-0.66/Makefile.in	2000-10-26 17:16:42.000000000 +0200
+++ radstock-0.66.oden/Makefile.in	2003-06-28 20:25:57.000000000 +0200
@@ -15,10 +15,10 @@
 VERSION=0.66
 INCLUDES=-I@srcdir@ @PCAP_INCLUDE@
 CFLAGS=@CFLAGS@ @DEFS@ -DVERSIONSTR=\"$(VERSION)\" -DDICTFILE=\"$(DICT)\"
-LIBS=-lpcap @EXTRA_LIBS@
+LIBS=-lpcap -lavlmap @EXTRA_LIBS@
 
-SRC=radstock.c process.c init.c 
-OBJS=radstock.o process.o init.o y.tab.o lex.yy.o
+SRC=radstock.c process.c init.c rad_password.c md5.c
+OBJS=radstock.o process.o init.o y.tab.o lex.yy.o rad_password.o md5.o
 TARGET=radstock
 MANPAGE=radstock.1
 DICTLOCAL=dictionary
@@ -78,6 +78,8 @@
 radstock.o: radstock.c radstock.h y.tab.h version.h
 init.o: init.c radstock.h y.tab.h
 process.o: process.c radstock.h y.tab.h
+rad_password.o: rad_password.c rad_password.h
+md5.o: md5.h md5.c
 
 tags: $(SRC)
 	$(TAGS) $(SRC)
diff -Naur radstock-0.66/README.password radstock-0.66.oden/README.password
--- radstock-0.66/README.password	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/README.password	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,86 @@
+Radius Password Logging
+-----------------------
+
+This patch implements User-Password (Attribute #2) decryption
+according to RFC2865 (RADIUS). It utilizes a clients file
+containing the secrets for each client. Filters can also
+be applied to passwords. This patch was written by 
+Viraj Alankar <valankar@bigfoot.com>.
+
+Included in this distribution is a MD5 library
+by L. Peter Deutsch <ghost@aladdin.com>. Also included is
+the avlmap library (v 0.10.2) by Philip Howard <avlmap@ipal.org>.
+My patch makes use of both of the above tools. Thanks to them for 
+making these tools available. Also of course thanks to the author 
+of radstock, Paul Rhodes <withnail@users.sourceforge.net>,
+for making this indispensible tool.
+
+This patch has been tested only with radstock v0.66 on Solaris 7
+Redhat Linux 6.2, and Redhat Linux 7.3.
+
+On Solaris you will need to install GNU patch in order to apply
+the patches. It is available here:
+
+http://www.fsf.org/software/patch/patch.html
+
+Installation
+------------
+
+1. Extract the radstock-0.66 sources.
+
+tar -xvzf radstock-0.66.tar.gz
+
+2. Extract patches into radstock directory and apply them.
+
+cd radstock-0.66
+tar -xvzf /path/to/radstock-0.66.password.patch-1.1.tar.gz
+patch -p1 < radstock-0.66.password.patch
+
+3. Compile the avlmap library within the radstock directory.
+
+cd avlmap-0.10.2
+./Configure
+make
+
+You do not have to install the avlmap library via make install.
+You may get some shared library errors on Solaris, but I link
+directly with the .o files so these can be ignored.
+
+4. Configure and make radstock as per its README.
+
+Example:
+
+cd ..
+./configure
+make
+make install
+
+Usage
+-----
+
+In order to view passwords, your radius clients file needs to
+be available with secrets. The file should be loaded with the -C
+option:
+
+radstock -C clients.cfg
+
+Format of Clients file
+----------------------
+
+2 file formats are supported:
+
+1. Radiator format
+
+<Client IP>
+	Secret SECRET
+</Client>
+
+2. Whitespace delimited format
+
+IP    SECRET
+
+The format is auto-detected. Do not mix formats.
+
+Note that in both formats, the IP must be used, not hostname.
+Also, if the first non-whitespace character in a line is '#', 
+the whole line is ignored.
diff -Naur radstock-0.66/md5.c radstock-0.66.oden/md5.c
--- radstock-0.66/md5.c	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/md5.c	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,392 @@
+/*
+  Copyright (C) 1999 Aladdin Enterprises.  All rights reserved.
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+
+  L. Peter Deutsch
+  ghost@aladdin.com
+
+ */
+/*$Id: md5.c $ */
+/*
+  Independent implementation of MD5 (RFC 1321).
+
+  This code implements the MD5 Algorithm defined in RFC 1321.
+  It is derived directly from the text of the RFC and not from the
+  reference implementation.
+
+  The original and principal author of md5.c is L. Peter Deutsch
+  <ghost@aladdin.com>.  Other authors are noted in the change history
+  that follows (in reverse chronological order):
+
+  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
+  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5).
+  1999-05-03 lpd Original version.
+ */
+
+#include "md5.h"
+
+#ifdef TEST
+/*
+ * Compile with -DTEST to create a self-contained executable test program.
+ * The test program should print out the same values as given in section
+ * A.5 of RFC 1321, reproduced below.
+ */
+#include <string.h>
+main()
+{
+    static const char *const test[7] = {
+	"", /*d41d8cd98f00b204e9800998ecf8427e*/
+	"a", /*0cc175b9c0f1b6a831c399e269772661*/
+	"abc", /*900150983cd24fb0d6963f7d28e17f72*/
+	"message digest", /*f96b697d7cb7938d525a2f31aaf161d0*/
+	"abcdefghijklmnopqrstuvwxyz", /*c3fcd3d76192e4007dfb496cca67e13b*/
+	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
+				/*d174ab98d277d9f5a5611c2c9f419d9f*/
+	"12345678901234567890123456789012345678901234567890123456789012345678901234567890" /*57edf4a22be3c955ac49da2e2107b67a*/
+    };
+    int i;
+
+    for (i = 0; i < 7; ++i) {
+	md5_state_t state;
+	md5_byte_t digest[16];
+	int di;
+
+	md5_init(&state);
+	md5_append(&state, (const md5_byte_t *)test[i], strlen(test[i]));
+	md5_finish(&state, digest);
+	printf("MD5 (\"%s\") = ", test[i]);
+	for (di = 0; di < 16; ++di)
+	    printf("%02x", digest[di]);
+	printf("\n");
+    }
+    return 0;
+}
+#endif /* TEST */
+
+
+/*
+ * For reference, here is the program that computed the T values.
+ */
+#if 0
+#include <math.h>
+main()
+{
+    int i;
+    for (i = 1; i <= 64; ++i) {
+	unsigned long v = (unsigned long)(4294967296.0 * fabs(sin((double)i)));
+	printf("#define T%d 0x%08lx\n", i, v);
+    }
+    return 0;
+}
+#endif
+/*
+ * End of T computation program.
+ */
+#define T1 0xd76aa478
+#define T2 0xe8c7b756
+#define T3 0x242070db
+#define T4 0xc1bdceee
+#define T5 0xf57c0faf
+#define T6 0x4787c62a
+#define T7 0xa8304613
+#define T8 0xfd469501
+#define T9 0x698098d8
+#define T10 0x8b44f7af
+#define T11 0xffff5bb1
+#define T12 0x895cd7be
+#define T13 0x6b901122
+#define T14 0xfd987193
+#define T15 0xa679438e
+#define T16 0x49b40821
+#define T17 0xf61e2562
+#define T18 0xc040b340
+#define T19 0x265e5a51
+#define T20 0xe9b6c7aa
+#define T21 0xd62f105d
+#define T22 0x02441453
+#define T23 0xd8a1e681
+#define T24 0xe7d3fbc8
+#define T25 0x21e1cde6
+#define T26 0xc33707d6
+#define T27 0xf4d50d87
+#define T28 0x455a14ed
+#define T29 0xa9e3e905
+#define T30 0xfcefa3f8
+#define T31 0x676f02d9
+#define T32 0x8d2a4c8a
+#define T33 0xfffa3942
+#define T34 0x8771f681
+#define T35 0x6d9d6122
+#define T36 0xfde5380c
+#define T37 0xa4beea44
+#define T38 0x4bdecfa9
+#define T39 0xf6bb4b60
+#define T40 0xbebfbc70
+#define T41 0x289b7ec6
+#define T42 0xeaa127fa
+#define T43 0xd4ef3085
+#define T44 0x04881d05
+#define T45 0xd9d4d039
+#define T46 0xe6db99e5
+#define T47 0x1fa27cf8
+#define T48 0xc4ac5665
+#define T49 0xf4292244
+#define T50 0x432aff97
+#define T51 0xab9423a7
+#define T52 0xfc93a039
+#define T53 0x655b59c3
+#define T54 0x8f0ccc92
+#define T55 0xffeff47d
+#define T56 0x85845dd1
+#define T57 0x6fa87e4f
+#define T58 0xfe2ce6e0
+#define T59 0xa3014314
+#define T60 0x4e0811a1
+#define T61 0xf7537e82
+#define T62 0xbd3af235
+#define T63 0x2ad7d2bb
+#define T64 0xeb86d391
+
+static void
+md5_process(md5_state_t *pms, const md5_byte_t *data /*[64]*/)
+{
+    md5_word_t
+	a = pms->abcd[0], b = pms->abcd[1],
+	c = pms->abcd[2], d = pms->abcd[3];
+    md5_word_t t;
+
+#ifndef ARCH_IS_BIG_ENDIAN
+# define ARCH_IS_BIG_ENDIAN 1	/* slower, default implementation */
+#endif
+#if ARCH_IS_BIG_ENDIAN
+
+    /*
+     * On big-endian machines, we must arrange the bytes in the right
+     * order.  (This also works on machines of unknown byte order.)
+     */
+    md5_word_t X[16];
+    const md5_byte_t *xp = data;
+    int i;
+
+    for (i = 0; i < 16; ++i, xp += 4)
+	X[i] = xp[0] + (xp[1] << 8) + (xp[2] << 16) + (xp[3] << 24);
+
+#else  /* !ARCH_IS_BIG_ENDIAN */
+
+    /*
+     * On little-endian machines, we can process properly aligned data
+     * without copying it.
+     */
+    md5_word_t xbuf[16];
+    const md5_word_t *X;
+
+    if (!((data - (const md5_byte_t *)0) & 3)) {
+	/* data are properly aligned */
+	X = (const md5_word_t *)data;
+    } else {
+	/* not aligned */
+	memcpy(xbuf, data, 64);
+	X = xbuf;
+    }
+#endif
+
+#define ROTATE_LEFT(x, n) (((x) << (n)) | ((x) >> (32 - (n))))
+
+    /* Round 1. */
+    /* Let [abcd k s i] denote the operation
+       a = b + ((a + F(b,c,d) + X[k] + T[i]) <<< s). */
+#define F(x, y, z) (((x) & (y)) | (~(x) & (z)))
+#define SET(a, b, c, d, k, s, Ti)\
+  t = a + F(b,c,d) + X[k] + Ti;\
+  a = ROTATE_LEFT(t, s) + b
+    /* Do the following 16 operations. */
+    SET(a, b, c, d,  0,  7,  T1);
+    SET(d, a, b, c,  1, 12,  T2);
+    SET(c, d, a, b,  2, 17,  T3);
+    SET(b, c, d, a,  3, 22,  T4);
+    SET(a, b, c, d,  4,  7,  T5);
+    SET(d, a, b, c,  5, 12,  T6);
+    SET(c, d, a, b,  6, 17,  T7);
+    SET(b, c, d, a,  7, 22,  T8);
+    SET(a, b, c, d,  8,  7,  T9);
+    SET(d, a, b, c,  9, 12, T10);
+    SET(c, d, a, b, 10, 17, T11);
+    SET(b, c, d, a, 11, 22, T12);
+    SET(a, b, c, d, 12,  7, T13);
+    SET(d, a, b, c, 13, 12, T14);
+    SET(c, d, a, b, 14, 17, T15);
+    SET(b, c, d, a, 15, 22, T16);
+#undef SET
+
+     /* Round 2. */
+     /* Let [abcd k s i] denote the operation
+          a = b + ((a + G(b,c,d) + X[k] + T[i]) <<< s). */
+#define G(x, y, z) (((x) & (z)) | ((y) & ~(z)))
+#define SET(a, b, c, d, k, s, Ti)\
+  t = a + G(b,c,d) + X[k] + Ti;\
+  a = ROTATE_LEFT(t, s) + b
+     /* Do the following 16 operations. */
+    SET(a, b, c, d,  1,  5, T17);
+    SET(d, a, b, c,  6,  9, T18);
+    SET(c, d, a, b, 11, 14, T19);
+    SET(b, c, d, a,  0, 20, T20);
+    SET(a, b, c, d,  5,  5, T21);
+    SET(d, a, b, c, 10,  9, T22);
+    SET(c, d, a, b, 15, 14, T23);
+    SET(b, c, d, a,  4, 20, T24);
+    SET(a, b, c, d,  9,  5, T25);
+    SET(d, a, b, c, 14,  9, T26);
+    SET(c, d, a, b,  3, 14, T27);
+    SET(b, c, d, a,  8, 20, T28);
+    SET(a, b, c, d, 13,  5, T29);
+    SET(d, a, b, c,  2,  9, T30);
+    SET(c, d, a, b,  7, 14, T31);
+    SET(b, c, d, a, 12, 20, T32);
+#undef SET
+
+     /* Round 3. */
+     /* Let [abcd k s t] denote the operation
+          a = b + ((a + H(b,c,d) + X[k] + T[i]) <<< s). */
+#define H(x, y, z) ((x) ^ (y) ^ (z))
+#define SET(a, b, c, d, k, s, Ti)\
+  t = a + H(b,c,d) + X[k] + Ti;\
+  a = ROTATE_LEFT(t, s) + b
+     /* Do the following 16 operations. */
+    SET(a, b, c, d,  5,  4, T33);
+    SET(d, a, b, c,  8, 11, T34);
+    SET(c, d, a, b, 11, 16, T35);
+    SET(b, c, d, a, 14, 23, T36);
+    SET(a, b, c, d,  1,  4, T37);
+    SET(d, a, b, c,  4, 11, T38);
+    SET(c, d, a, b,  7, 16, T39);
+    SET(b, c, d, a, 10, 23, T40);
+    SET(a, b, c, d, 13,  4, T41);
+    SET(d, a, b, c,  0, 11, T42);
+    SET(c, d, a, b,  3, 16, T43);
+    SET(b, c, d, a,  6, 23, T44);
+    SET(a, b, c, d,  9,  4, T45);
+    SET(d, a, b, c, 12, 11, T46);
+    SET(c, d, a, b, 15, 16, T47);
+    SET(b, c, d, a,  2, 23, T48);
+#undef SET
+
+     /* Round 4. */
+     /* Let [abcd k s t] denote the operation
+          a = b + ((a + I(b,c,d) + X[k] + T[i]) <<< s). */
+#define I(x, y, z) ((y) ^ ((x) | ~(z)))
+#define SET(a, b, c, d, k, s, Ti)\
+  t = a + I(b,c,d) + X[k] + Ti;\
+  a = ROTATE_LEFT(t, s) + b
+     /* Do the following 16 operations. */
+    SET(a, b, c, d,  0,  6, T49);
+    SET(d, a, b, c,  7, 10, T50);
+    SET(c, d, a, b, 14, 15, T51);
+    SET(b, c, d, a,  5, 21, T52);
+    SET(a, b, c, d, 12,  6, T53);
+    SET(d, a, b, c,  3, 10, T54);
+    SET(c, d, a, b, 10, 15, T55);
+    SET(b, c, d, a,  1, 21, T56);
+    SET(a, b, c, d,  8,  6, T57);
+    SET(d, a, b, c, 15, 10, T58);
+    SET(c, d, a, b,  6, 15, T59);
+    SET(b, c, d, a, 13, 21, T60);
+    SET(a, b, c, d,  4,  6, T61);
+    SET(d, a, b, c, 11, 10, T62);
+    SET(c, d, a, b,  2, 15, T63);
+    SET(b, c, d, a,  9, 21, T64);
+#undef SET
+
+     /* Then perform the following additions. (That is increment each
+        of the four registers by the value it had before this block
+        was started.) */
+    pms->abcd[0] += a;
+    pms->abcd[1] += b;
+    pms->abcd[2] += c;
+    pms->abcd[3] += d;
+}
+
+void
+md5_init(md5_state_t *pms)
+{
+    pms->count[0] = pms->count[1] = 0;
+    pms->abcd[0] = 0x67452301;
+    pms->abcd[1] = 0xefcdab89;
+    pms->abcd[2] = 0x98badcfe;
+    pms->abcd[3] = 0x10325476;
+}
+
+void
+md5_append(md5_state_t *pms, const md5_byte_t *data, int nbytes)
+{
+    const md5_byte_t *p = data;
+    int left = nbytes;
+    int offset = (pms->count[0] >> 3) & 63;
+    md5_word_t nbits = (md5_word_t)(nbytes << 3);
+
+    if (nbytes <= 0)
+	return;
+
+    /* Update the message length. */
+    pms->count[1] += nbytes >> 29;
+    pms->count[0] += nbits;
+    if (pms->count[0] < nbits)
+	pms->count[1]++;
+
+    /* Process an initial partial block. */
+    if (offset) {
+	int copy = (offset + nbytes > 64 ? 64 - offset : nbytes);
+
+	memcpy(pms->buf + offset, p, copy);
+	if (offset + copy < 64)
+	    return;
+	p += copy;
+	left -= copy;
+	md5_process(pms, pms->buf);
+    }
+
+    /* Process full blocks. */
+    for (; left >= 64; p += 64, left -= 64)
+	md5_process(pms, p);
+
+    /* Process a final partial block. */
+    if (left)
+	memcpy(pms->buf, p, left);
+}
+
+void
+md5_finish(md5_state_t *pms, md5_byte_t digest[16])
+{
+    static const md5_byte_t pad[64] = {
+	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
+    };
+    md5_byte_t data[8];
+    int i;
+
+    /* Save the length before padding. */
+    for (i = 0; i < 8; ++i)
+	data[i] = (md5_byte_t)(pms->count[i >> 2] >> ((i & 3) << 3));
+    /* Pad to 56 bytes mod 64. */
+    md5_append(pms, pad, ((55 - (pms->count[0] >> 3)) & 63) + 1);
+    /* Append the length. */
+    md5_append(pms, data, 8);
+    for (i = 0; i < 16; ++i)
+	digest[i] = (md5_byte_t)(pms->abcd[i >> 2] >> ((i & 3) << 3));
+}
diff -Naur radstock-0.66/md5.h radstock-0.66.oden/md5.h
--- radstock-0.66/md5.h	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/md5.h	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,94 @@
+/*
+  Copyright (C) 1999 Aladdin Enterprises.  All rights reserved.
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+
+  L. Peter Deutsch
+  ghost@aladdin.com
+
+ */
+/*$Id: md5.h $ */
+/*
+  Independent implementation of MD5 (RFC 1321).
+
+  This code implements the MD5 Algorithm defined in RFC 1321.
+  It is derived directly from the text of the RFC and not from the
+  reference implementation.
+
+  The original and principal author of md5.h is L. Peter Deutsch
+  <ghost@aladdin.com>.  Other authors are noted in the change history
+  that follows (in reverse chronological order):
+
+  1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
+  1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
+	added conditionalization for C++ compilation from Martin
+	Purschke <purschke@bnl.gov>.
+  1999-05-03 lpd Original version.
+ */
+
+#ifndef md5_INCLUDED
+#  define md5_INCLUDED
+
+/*
+ * This code has some adaptations for the Ghostscript environment, but it
+ * will compile and run correctly in any environment with 8-bit chars and
+ * 32-bit ints.  Specifically, it assumes that if the following are
+ * defined, they have the same meaning as in Ghostscript: P1, P2, P3,
+ * ARCH_IS_BIG_ENDIAN.
+ */
+
+typedef unsigned char md5_byte_t; /* 8-bit byte */
+typedef unsigned int md5_word_t; /* 32-bit word */
+
+/* Define the state of the MD5 Algorithm. */
+typedef struct md5_state_s {
+    md5_word_t count[2];	/* message length in bits, lsw first */
+    md5_word_t abcd[4];		/* digest buffer */
+    md5_byte_t buf[64];		/* accumulate block */
+} md5_state_t;
+
+#ifdef __cplusplus
+extern "C" 
+{
+#endif
+
+/* Initialize the algorithm. */
+#ifdef P1
+void md5_init(P1(md5_state_t *pms));
+#else
+void md5_init(md5_state_t *pms);
+#endif
+
+/* Append a string to the message. */
+#ifdef P3
+void md5_append(P3(md5_state_t *pms, const md5_byte_t *data, int nbytes));
+#else
+void md5_append(md5_state_t *pms, const md5_byte_t *data, int nbytes);
+#endif
+
+/* Finish the message and return the digest. */
+#ifdef P2
+void md5_finish(P2(md5_state_t *pms, md5_byte_t digest[16]));
+#else
+void md5_finish(md5_state_t *pms, md5_byte_t digest[16]);
+#endif
+
+#ifdef __cplusplus
+}  /* end extern "C" */
+#endif
+
+#endif /* md5_INCLUDED */
diff -Naur radstock-0.66/process.c radstock-0.66.oden/process.c
--- radstock-0.66/process.c	2000-10-26 16:43:42.000000000 +0200
+++ radstock-0.66.oden/process.c	2003-06-28 20:25:42.000000000 +0200
@@ -50,6 +50,7 @@
 
 #include "radstock.h"
 #include "y.tab.h"
+#include "rad_password.h"
 
 static char rcsid[] = "$Id: process.c,v 1.7 2000/10/26 14:43:42 withnail Exp $";
 int t_watchptr = 0;
@@ -275,7 +276,7 @@
   unsigned ip_off = ntohs(ip_packet->ip_off);
   unsigned fragmented = ip_off & (IP_MF | IP_OFFMASK);
   //  unsigned frag_offset = fragmented?(ip_off & IP_OFFMASK) * 8:0;
-  static char tmpbuf[LBUFSIZE], longbuf[LBUFSIZE], hdrbuf[132];
+  static char tmpbuf[LBUFSIZE], longbuf[LBUFSIZE], hdrbuf[132], tmpbuf2[LBUFSIZE];
   struct attribs *tmpdata, *tmpdatav;
   struct udphdr* udp;
   unsigned udphdr_offset;
@@ -284,9 +285,12 @@
   unsigned int lp, len;
   char showpkt, replypkt = 0, reverse = 0;
   char srchost[24], dsthost[24];
+  char authenticator[17];
+  char password[17];
+  int retval, retval2;
+
   if (ip_packet->ip_p != IPPROTO_UDP) 
     return;
-
 	   
   reset_filters();
   *longbuf = 0; *hdrbuf = 0;
@@ -300,6 +304,9 @@
   pkttype = *data;
   ident   = *(data+1);
 
+  memcpy(authenticator, data+4, 16);
+  authenticator[16] = 0;
+
   switch (pkttype) {
   case RADPKT_AUTH_REQUEST:
     showpkt = show_auth & show_req;
@@ -381,7 +388,7 @@
   atdata = data + 20;
   while (atdata < data + len)
   {
-    //printf("atdata %d data+len %d\n", atdata, data+len);
+    // printf("atdata %d data+len %d\n", atdata, data+len);
     attrib = (unsigned char) *atdata;
     length = (unsigned char) *(atdata+1);
 
@@ -448,14 +455,38 @@
 	  }
 	  *(tmpbuf+lp-2) = '\0';
 
+	  if (tmpdata->vala == 2 && show_pass) {
+	    memcpy(password, atdata+2, 16);
+	    password[16] = 0;
+
+	    /* Try to decrypt with secret of destination address in case source fails
+	     * This is to try to catch requests which we proxy to other servers
+	     */
+	    retval = decrypt_user_password(tmpbuf, password, authenticator, sizeof(tmpbuf),
+	      inet_ntoa(ip_packet->ip_src));
+	    if (retval > 1) {
+	      retval2 = decrypt_user_password(tmpbuf2, password, authenticator, sizeof(tmpbuf),
+	        inet_ntoa(ip_packet->ip_dst));
+	      if (retval2 < retval) {
+	        strcpy(tmpbuf, tmpbuf2);
+	      }
+	    } else if (!retval) {
+	      strcpy(tmpbuf, "<UNKNOWN>");
+	    }
+	  }
+
 	  // Check for filter matches
 	  if (!replypkt)
 	    match_attr(attrib, tmpdata->valb, (void *) tmpbuf);
 
-	  /* Need to add this onto the end to make it useable */
-	  *(tmpbuf+lp-2) = '\"';
-	  *(tmpbuf+lp-1) = '\n';
-	  *(tmpbuf+lp)   = '\0';
+	  if (tmpdata->vala == 2 && show_pass) {
+	    strcat(tmpbuf, "\"\n");
+	  } else {
+	    /* Need to add this onto the end to make it useable */
+	    *(tmpbuf+lp-2) = '\"';
+	    *(tmpbuf+lp-1) = '\n';
+	    *(tmpbuf+lp)   = '\0';
+	  }
 	  strcat(longbuf, tmpbuf);
 	}
       }
diff -Naur radstock-0.66/rad_password.c radstock-0.66.oden/rad_password.c
--- radstock-0.66/rad_password.c	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/rad_password.c	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,239 @@
+#include <stdio.h>
+#include <string.h>
+#include <ctype.h>
+#include "md5.h"
+#include "map.h"
+#include "rad_password.h"
+
+#define MAX_SECRET 256
+#define MAX_IP 40
+#define MAX_LINE 256
+
+MAP rad_clients = NULL;
+
+int lookup_secret(char *store_secret, char *client_ip, int store_size);
+int add_client(char *ip, char *secret);
+int parse_radiator_clients(char *line, FILE *fp, int line_size);
+int parse_clients(char *line, FILE *fp, int line_size);
+
+int add_client(char *ip, char *secret)
+{
+	map_str_insert(rad_clients, ip);
+	map_str_store(rad_clients, secret);
+}
+
+int load_client_list(char *filename)
+{
+	FILE *fp;
+	char line[MAX_LINE];
+	char *ch_ptr;
+	int retval = 0;
+
+	if (!filename || !(fp = fopen(filename, "r"))) {
+		return 0;
+	}
+
+	if (rad_clients) {
+		map_destroy(rad_clients);
+		rad_clients = NULL;
+	}
+
+	if (!(rad_clients = map_str_new())) {
+		fclose(fp);
+		return 0;
+	}
+
+	/* Find out format of file */
+	while ((ch_ptr = fgets(line, sizeof(line), fp))) {
+		while(*ch_ptr && isspace(*ch_ptr)) {
+			ch_ptr++;
+		}
+		if (!*ch_ptr || *ch_ptr == '#') {
+			continue;
+		}
+		if (!strncmp(line, "<Client ", 8)) {
+			/* Radiator format */
+			retval = parse_radiator_clients(line, fp, sizeof(line));
+		} else {
+			/* Standard whitespace delimited format */
+			retval = parse_clients(line, fp, sizeof(line));
+		}
+	}
+
+	fclose(fp);
+	return retval;
+}
+
+int parse_clients(char *line, FILE *fp, int line_size)
+{
+	char *ch_ptr;
+	char *work_ptr;
+	char current_ip[MAX_IP] = "";
+	char current_secret[MAX_SECRET] = "";
+
+	do {
+		ch_ptr = line;
+		while(*ch_ptr && isspace(*ch_ptr)) {
+			ch_ptr++;
+		}
+		if (!*ch_ptr || *ch_ptr == '#') {
+			continue;
+		}
+		work_ptr = ch_ptr;
+		while(*ch_ptr && !isspace(*ch_ptr)) {
+			ch_ptr++;
+		}
+		if (!*ch_ptr) {
+			continue;
+		}
+		*ch_ptr = 0;
+		if (strlen(work_ptr) < sizeof(current_ip)) {
+			strcpy(current_ip, work_ptr);
+		} else {
+			continue;
+		}
+		ch_ptr++;
+		while (*ch_ptr && isspace(*ch_ptr)) {
+			ch_ptr++;
+		}
+		if (!*ch_ptr) {
+			continue;
+		}
+		work_ptr = ch_ptr;
+		while(*ch_ptr && !isspace(*ch_ptr)) {
+			ch_ptr++;
+		}
+		if (ch_ptr == work_ptr) {
+			continue;
+		}
+		*ch_ptr = 0;
+		if (strlen(work_ptr) < sizeof(current_secret)) {
+			strcpy(current_secret, work_ptr);
+		} else {
+			continue;
+		}
+		add_client(current_ip, current_secret);
+	} while (fgets(line, line_size, fp));
+		
+	return 1;
+}
+
+int parse_radiator_clients(char *line, FILE *fp, int line_size)
+{
+	char *ch_ptr;
+	char *work_ptr;
+	char current_ip[MAX_IP] = "";
+	char current_secret[MAX_SECRET] = "";
+
+	do {
+		if (!strncmp(line, "<Client ", 8)) {
+			ch_ptr = line+8;
+			while (isspace(*ch_ptr)) {
+				ch_ptr++;
+			}
+			if ((work_ptr = strchr(ch_ptr, '>'))) {
+				*work_ptr = 0;
+			}
+			strcpy(current_ip, ch_ptr);
+			continue;
+		} 
+		if ((work_ptr = strstr(line, "Secret"))) {
+			/* Make sure only whitespace before */
+			for (ch_ptr = line; ch_ptr < work_ptr; ch_ptr++) {
+				if (!isspace(*ch_ptr)) {
+					break;
+				}
+			}
+			if (ch_ptr != work_ptr) {
+				continue;
+			}
+			ch_ptr = work_ptr+6;
+			while (isspace(*ch_ptr)) {
+				ch_ptr++;
+			}
+			if ((work_ptr = strchr(ch_ptr, '\n'))) {
+				*work_ptr = 0;
+			}
+			strcpy(current_secret, ch_ptr);
+			add_client(current_ip, current_secret);
+		}
+	} while (fgets(line, line_size, fp));
+
+	return 1;
+}
+
+int lookup_secret(char *store_secret, char *client_ip, int store_size)
+{
+	char *data;
+	int retval;
+
+	if (!rad_clients) {
+		return 0;
+	}
+
+	if (map_str_find_exact(rad_clients, client_ip) > 0) {
+		data = map_str_fetch_ptr(rad_clients);
+		if (strlen(data) < store_size) {
+			strcpy(store_secret, data);
+			return 1;
+		} else {
+			return 0;
+		}
+	}
+
+	/* Check the DEFAULT user if a specific one wasn't found */
+	if (map_str_find_exact(rad_clients, "DEFAULT") > 0) {
+		data = map_str_fetch_ptr(rad_clients);
+		if (strlen(data) < store_size) {
+			strcpy(store_secret, data);
+			return 1;
+		} else {
+			return 0;
+		}
+	}
+		
+	return 0;
+}
+
+int decrypt_user_password(char *store, char *password, char *authenticator, int store_size,
+	char *client_ip)
+{
+	char secret[MAX_SECRET];
+	char md[sizeof(secret) + 16 + 1];
+	char result[17];
+	md5_state_t state;
+	md5_byte_t digest[16];
+	int i;
+	int foundbad = 0;
+
+	if (!lookup_secret(secret, client_ip, sizeof(secret))) {
+		return 0;
+	}
+
+	memcpy(md, secret, strlen(secret));
+	memcpy(md+strlen(secret), authenticator, 16);
+
+	md[strlen(secret) + 16] = 0;
+
+	md5_init(&state);
+	md5_append(&state, (const md5_byte_t *)md, strlen(secret) + 16);
+	md5_finish(&state, digest);
+
+	for (i = 0; i < 16; i++) {
+		result[i] = password[i] ^ digest[i];
+	}
+	result[16] = 0;
+	
+	if (strlen(result) < store_size) {
+		for (i = 0; i < strlen(result); i++) {
+			if (!isprint(result[i])) {
+				result[i] = '*';
+				foundbad++;
+			}
+		}
+		strcpy(store, result);
+		return (foundbad + 1);
+	} else {
+		return 0;
+	}
+}
diff -Naur radstock-0.66/rad_password.h radstock-0.66.oden/rad_password.h
--- radstock-0.66/rad_password.h	1970-01-01 01:00:00.000000000 +0100
+++ radstock-0.66.oden/rad_password.h	2003-06-28 20:25:42.000000000 +0200
@@ -0,0 +1,9 @@
+#ifndef RAD_PASSWORD_H
+#define RAD_PASSWORD_H
+
+int decrypt_user_password(char *store, char *password, char *authenticator, int store_size,
+	char *client_ip);
+
+int load_client_list(char *filename);
+
+#endif
diff -Naur radstock-0.66/radstock.c radstock-0.66.oden/radstock.c
--- radstock-0.66/radstock.c	2000-10-26 17:16:42.000000000 +0200
+++ radstock-0.66.oden/radstock.c	2003-06-28 20:25:42.000000000 +0200
@@ -49,6 +49,8 @@
 #include <signal.h>
 
 #include "radstock.h"
+#include "rad_password.h"
+
 //#include "version.h"
 
 static char rcsid[] = 
@@ -83,6 +85,7 @@
 int show_acct = 1;
 int show_req  = 1;
 int show_resp = 1;
+int show_pass = 0;
 
 char *read_file = NULL, *dump_file = NULL, *dict_file = NULL;
 pcap_dumper_t *pd_dump = NULL;
@@ -110,8 +113,13 @@
    * STDIN, file, or optarg, and treat it exactly the same 
    */
   if (debug) printf("Parsing switches\n");
-  while ((c = getopt(argc, argv, "KLMNpd:hXVi:c:wqe:vxlDtTn:i:A:I:O:f:")) != EOF) {
+  while ((c = getopt(argc, argv, "KLMNpd:hXVi:c:wqe:vxlDtTn:i:A:I:O:f:C:")) != EOF) {
     switch (c) {
+    case 'C':
+      if (load_client_list(optarg)) {
+        show_pass = 1;
+      }
+      break;
     case 'K':
       if (show_auth == 1) show_acct = 0;
       break;
@@ -528,6 +536,7 @@
   printf("          -V      - show the version number\n");
   printf("          -e exp  - radius filter expression\n");
   printf("          -c file - read radius filter from file (- = stdin)\n");
+  printf("          -C file - read clients from file for password decryption\n");
   printf("\ni.e. radstock -e \"user-name = henry\" port 1645\n\n");
 
   exit(e);
diff -Naur radstock-0.66/radstock.h radstock-0.66.oden/radstock.h
--- radstock-0.66/radstock.h	2000-10-24 20:02:35.000000000 +0200
+++ radstock-0.66.oden/radstock.h	2003-06-28 20:25:42.000000000 +0200
@@ -73,7 +73,7 @@
 extern int t_radfilters;
 extern struct in_addr net, mask;
 
-extern int show_auth, show_acct, show_req, show_resp;
+extern int show_auth, show_acct, show_req, show_resp, show_pass;
 
 extern int link_offset;
 extern int quiet;
